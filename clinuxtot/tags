!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CLIENT_HEADER	process_conf.c	/^const char *CLIENT_HEADER = "client_name";$/;"	v
MAX_PORTS	main.h	15;"	d
PORTS_HEADER	process_conf.c	/^const char *PORTS_HEADER = "ports";$/;"	v
PORTS_NUMBER	process_conf.c	/^const char *PORTS_NUMBER = "num";$/;"	v
PORT_T	main.h	/^typedef short PORT_T;$/;"	t
SERVER	main.c	22;"	d	file:
SERVER	process_conf.c	1;"	d	file:
_CRT_SECURE_NO_WARNINGS	json.c	34;"	d	file:
_GNU_SOURCE	test.c	3;"	d	file:
_JSON_H	json.h	32;"	d
__MAINH__GUARD_H	main.h	2;"	d
__USE_GNU	test.c	4;"	d	file:
_json_object_entry	json.h	/^typedef struct _json_object_entry$/;"	s
_json_value	json.h	/^         inline _json_value ()$/;"	f	struct:_json_value
_json_value	json.h	/^typedef struct _json_value$/;"	s
_reserved	json.h	/^   } _reserved;$/;"	m	struct:_json_value	typeref:union:_json_value::__anon8
array	json.h	/^      } array;$/;"	m	union:_json_value::__anon4	typeref:struct:_json_value::__anon4::__anon7
begin	json.h	/^         decltype(values) begin () const$/;"	f	struct:_json_value::__anon4::__anon6
begin	json.h	/^         decltype(values) begin () const$/;"	f	struct:_json_value::__anon4::__anon7
boolean	json.h	/^      int boolean;$/;"	m	union:_json_value::__anon4
build_config	process_conf.c	/^struct server_configuration_t *build_config(struct server_configuration_t **p_to_conf_map, const char *conf_file) {$/;"	f
client_configuration_t	main.h	/^struct client_configuration_t {$/;"	s
client_info_struct_t	main.c	/^struct client_info_struct_t {$/;"	s	file:
client_name	main.h	/^	short client_name;$/;"	m	struct:server_configuration_t
col	json.h	/^      unsigned int line, col;$/;"	m	struct:_json_value
comparePorts	process_conf.c	/^int comparePorts(const void * port1, const void * port2) { $/;"	f
conf_mapping_file	main.h	/^static const char * conf_mapping_file = "\/tmp\/map_conf";$/;"	v
connect_to_mq	client.c	/^int connect_to_mq() {$/;"	f
connect_to_port_thread	test.c	/^void *connect_to_port_thread(void *args) {$/;"	f
connect_to_server	test.c	/^void connect_to_server(short ports[], int n_ports) {$/;"	f
cur_col	json.c	/^   unsigned int cur_line, cur_col;$/;"	m	struct:__anon1	file:
cur_line	json.c	/^   unsigned int cur_line, cur_col;$/;"	m	struct:__anon1	file:
dbl	json.h	/^      double dbl;$/;"	m	union:_json_value::__anon4
default_alloc	json.c	/^static void * default_alloc (size_t size, int zero, void * user_data)$/;"	f	file:
default_free	json.c	/^static void default_free (void * ptr, void * user_data)$/;"	f	file:
dest_ports	main.h	/^	PORT_T dest_ports[MAX_PORTS];$/;"	m	struct:client_configuration_t
end	json.h	/^         decltype(values) end () const$/;"	f	struct:_json_value::__anon4::__anon6
end	json.h	/^         decltype(values) end () const$/;"	f	struct:_json_value::__anon4::__anon7
execute_server	main.c	/^void execute_server(mqd_t mqid) {$/;"	f
first_pass	json.c	/^   int first_pass;$/;"	m	struct:__anon1	file:
flag_block_comment	json.c	/^   flag_block_comment    = 1 << 14;$/;"	v	file:
flag_done	json.c	/^   flag_done             = 1 << 7,$/;"	v	file:
flag_escaped	json.c	/^   flag_escaped          = 1 << 4,$/;"	v	file:
flag_line_comment	json.c	/^   flag_line_comment     = 1 << 13,$/;"	v	file:
flag_need_colon	json.c	/^   flag_need_colon       = 1 << 6,$/;"	v	file:
flag_need_comma	json.c	/^   flag_need_comma       = 1 << 2,$/;"	v	file:
flag_next	json.c	/^   flag_next             = 1 << 0,$/;"	v	file:
flag_num_e	json.c	/^   flag_num_e            = 1 << 10,$/;"	v	file:
flag_num_e_got_sign	json.c	/^   flag_num_e_got_sign   = 1 << 11,$/;"	v	file:
flag_num_e_negative	json.c	/^   flag_num_e_negative   = 1 << 12,$/;"	v	file:
flag_num_negative	json.c	/^   flag_num_negative     = 1 << 8,$/;"	v	file:
flag_num_zero	json.c	/^   flag_num_zero         = 1 << 9,$/;"	v	file:
flag_reproc	json.c	/^   flag_reproc           = 1 << 1,$/;"	v	file:
flag_seek_value	json.c	/^   flag_seek_value       = 1 << 3, $/;"	v	file:
flag_string	json.c	/^   flag_string           = 1 << 5,$/;"	v	file:
handle_client_thread_function	main.c	/^void *handle_client_thread_function(void *args) {$/;"	f
handle_dead_children	main.c	/^void *handle_dead_children(void *arg) {$/;"	f
hex_value	json.c	/^static unsigned char hex_value (json_char c)$/;"	f	file:
integer	json.h	/^      json_int_t integer;$/;"	m	union:_json_value::__anon4
json_alloc	json.c	/^static void * json_alloc (json_state * state, unsigned long size, int zero)$/;"	f	file:
json_array	json.h	/^   json_array,$/;"	e	enum:__anon3
json_boolean	json.h	/^   json_boolean,$/;"	e	enum:__anon3
json_char	json.h	35;"	d
json_double	json.h	/^   json_double,$/;"	e	enum:__anon3
json_enable_comments	json.h	75;"	d
json_error_max	json.h	261;"	d
json_int_t	json.h	41;"	d
json_int_t	json.h	43;"	d
json_integer	json.h	/^   json_integer,$/;"	e	enum:__anon3
json_none	json.h	/^   json_none,$/;"	e	enum:__anon3
json_null	json.h	/^   json_null$/;"	e	enum:__anon3
json_object	json.h	/^   json_object,$/;"	e	enum:__anon3
json_object_entry	json.h	/^} json_object_entry;$/;"	t	typeref:struct:_json_object_entry
json_parse	json.c	/^json_value * json_parse (const json_char * json, size_t length)$/;"	f
json_parse_ex	json.c	/^json_value * json_parse_ex (json_settings * settings,$/;"	f
json_settings	json.h	/^} json_settings;$/;"	t	typeref:struct:__anon2
json_state	json.c	/^} json_state;$/;"	t	typeref:struct:__anon1	file:
json_string	json.h	/^   json_string,$/;"	e	enum:__anon3
json_type	json.h	/^} json_type;$/;"	t	typeref:enum:__anon3
json_uchar	json.c	/^typedef unsigned int json_uchar;$/;"	t	file:
json_value	json.h	/^} json_value;$/;"	t	typeref:struct:_json_value
json_value_free	json.c	/^void json_value_free (json_value * value)$/;"	f
json_value_free_ex	json.c	/^void json_value_free_ex (json_settings * settings, json_value * value)$/;"	f
json_value_none	json.c	/^const struct _json_value json_value_none;$/;"	v	typeref:struct:_json_value
length	json.h	/^         unsigned int length;$/;"	m	struct:_json_value::__anon4::__anon5
length	json.h	/^         unsigned int length;$/;"	m	struct:_json_value::__anon4::__anon6
length	json.h	/^         unsigned int length;$/;"	m	struct:_json_value::__anon4::__anon7
line	json.h	/^      unsigned int line, col;$/;"	m	struct:_json_value
line_and_col	json.c	201;"	d	file:
listen_ports	main.h	/^	PORT_T listen_ports[MAX_PORTS];$/;"	m	struct:server_configuration_t
m	main.c	/^pthread_mutex_t m;$/;"	v
main	client.c	/^int main(int argc, char **argv) {$/;"	f
main	main.c	/^int main(int argc, char **argv) $/;"	f
main	test.c	/^int main() {$/;"	f
max_memory	json.h	/^   unsigned long max_memory;$/;"	m	struct:__anon2
mem_alloc	json.h	/^   void * (* mem_alloc) (size_t, int zero, void * user_data);$/;"	m	struct:__anon2
mem_free	json.h	/^   void (* mem_free) (void *, void * user_data);$/;"	m	struct:__anon2
mqid	main.c	/^	int mqid;$/;"	m	struct:client_info_struct_t	file:
mqueue_name	main.h	/^static const char * mqueue_name = "\/msgmsg2";$/;"	v
msg_data	main.h	/^	char msg_data[50];$/;"	m	struct:my_msg_t
msg_id	main.c	/^static volatile int msg_id = 0;$/;"	v	file:
msgid	main.h	/^	int msgid;$/;"	m	struct:my_msg_t
my_msg	main.h	/^} my_msg;$/;"	t	typeref:struct:my_msg_t
my_msg_t	main.h	/^typedef struct my_msg_t {$/;"	s
name	json.h	/^    json_char * name;$/;"	m	struct:_json_object_entry
name_length	json.h	/^    unsigned int name_length;$/;"	m	struct:_json_object_entry
new_value	json.c	/^static int new_value (json_state * state,$/;"	f	file:
next_alloc	json.h	/^      struct _json_value * next_alloc;$/;"	m	union:_json_value::__anon8	typeref:struct:_json_value::__anon8::_json_value
nports	main.h	/^	short nports;$/;"	m	struct:client_configuration_t
nports	main.h	/^	short nports;$/;"	m	struct:server_configuration_t
object	json.h	/^      } object;$/;"	m	union:_json_value::__anon4	typeref:struct:_json_value::__anon4::__anon6
object_mem	json.h	/^      void * object_mem;$/;"	m	union:_json_value::__anon8
on_program_exit	main.c	/^void on_program_exit(pthread_t sig_thread_id, int **child_pids, int n_readers) {$/;"	f
operator []	json.h	/^         inline const struct _json_value &operator [] (const char * index) const$/;"	f	struct:_json_value
operator []	json.h	/^         inline const struct _json_value &operator [] (int index) const$/;"	f	struct:_json_value
operator bool	json.h	/^         inline operator bool () const$/;"	f	struct:_json_value
operator const char *	json.h	/^         inline operator const char * () const$/;"	f	struct:_json_value
operator double	json.h	/^         inline operator double () const$/;"	f	struct:_json_value
operator json_int_t	json.h	/^         inline operator json_int_t () const$/;"	f	struct:_json_value
pad	main.h	/^	char  pad[sizeof(short)]; \/\/zero padding$/;"	m	struct:client_configuration_t
parent	json.h	/^   struct _json_value * parent;$/;"	m	struct:_json_value	typeref:struct:_json_value::_json_value
parent	main.h	/^	int parent;$/;"	m	struct:my_msg_t
printPath	main.c	/^void printPath() {$/;"	f
proc_child_process	main.c	/^void proc_child_process(mqd_t mqid) {$/;"	f
ptr	json.c	/^   const json_char * ptr;$/;"	m	struct:__anon1	file:
ptr	json.h	/^         json_char * ptr; \/* null terminated *\/$/;"	m	struct:_json_value::__anon4::__anon5
receive_http_requests	main.c	/^void receive_http_requests(int prtcl, short listen_ports[], int n_ports, char *ip, mqd_t mqid) {$/;"	f
server_configuration_t	main.h	/^struct server_configuration_t {$/;"	s
settings	json.c	/^   json_settings settings;$/;"	m	struct:__anon1	file:
settings	json.h	/^   int settings;$/;"	m	struct:__anon2
setup_child_sig_thread	main.c	/^void setup_child_sig_thread(pthread_t *sig_thread_id) {$/;"	f
setup_mq	main.c	/^void setup_mq(struct mq_attr *attr, mqd_t *mqid) {$/;"	f
setup_reader_units	main.c	/^void setup_reader_units(int n_readers, mqd_t mqid, int **child_pids ) {$/;"	f
source_socket	main.c	/^	int source_socket;$/;"	m	struct:client_info_struct_t	file:
string	json.h	/^      } string;$/;"	m	union:_json_value::__anon4	typeref:struct:_json_value::__anon4::__anon5
string_add	json.c	198;"	d	file:
type	json.h	/^   json_type type;$/;"	m	struct:_json_value
u	json.h	/^   } u;$/;"	m	struct:_json_value	typeref:union:_json_value::__anon4
uint_max	json.c	/^   unsigned int uint_max;$/;"	m	struct:__anon1	file:
ulong_max	json.c	/^   unsigned long ulong_max;$/;"	m	struct:__anon1	file:
updateMappingAddr	process_conf.c	/^void updateMappingAddr(struct server_configuration_t **p_to_conf_map) {$/;"	f
used_memory	json.c	/^   unsigned long used_memory;$/;"	m	struct:__anon1	file:
user_data	json.h	/^   void * user_data;  \/* will be passed to mem_alloc and mem_free *\/$/;"	m	struct:__anon2
value	json.h	/^    struct _json_value * value;$/;"	m	struct:_json_object_entry	typeref:struct:_json_object_entry::_json_value
value_extra	json.h	/^   size_t value_extra;  \/* how much extra space to allocate for values? *\/$/;"	m	struct:__anon2
values	json.h	/^         json_object_entry * values;$/;"	m	struct:_json_value::__anon4::__anon6
values	json.h	/^         struct _json_value ** values;$/;"	m	struct:_json_value::__anon4::__anon7	typeref:struct:_json_value::__anon4::__anon7::_json_value
whitespace	json.c	194;"	d	file:
